{"ast":null,"code":"import axios from 'axios';\n\n// Configuration de base d'axios\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token d'authentification\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Intercepteur pour gérer les erreurs de réponse\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expiré ou invalide\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Services pour les magasins\nexport const storeService = {\n  getAll: () => api.get('/stores'),\n  getById: id => api.get(`/stores/${id}`),\n  getByCity: city => api.get(`/stores/search/city/${city}`),\n  getByPostalCode: postalCode => api.get(`/stores/search/postal/${postalCode}`),\n  getNearby: (latitude, longitude, radius = 10) => api.get(`/stores/nearby?latitude=${latitude}&longitude=${longitude}&radius=${radius}`),\n  create: data => api.post('/stores', data),\n  update: (id, data) => api.put(`/stores/${id}`, data),\n  delete: id => api.delete(`/stores/${id}`)\n};\n\n// Services pour les produits\nexport const productService = {\n  getAll: (params = {}) => api.get('/products', {\n    params\n  }),\n  getById: id => api.get(`/products/${id}`),\n  search: (term, limit = 50) => api.get(`/products/search/${term}?limit=${limit}`),\n  getByCategory: (categoryId, limit = 50) => api.get(`/products/category/${categoryId}?limit=${limit}`),\n  getByBarcode: barcode => api.get(`/products/barcode/${barcode}`),\n  getPrices: id => api.get(`/products/${id}/prices`),\n  compare: (id, storeIds = []) => api.get(`/products/${id}/compare?stores=${storeIds.join(',')}`),\n  getStats: id => api.get(`/products/${id}/stats`),\n  searchAdvanced: filters => api.post('/products/search/advanced', filters),\n  create: data => api.post('/products', data),\n  update: (id, data) => api.put(`/products/${id}`, data),\n  delete: id => api.delete(`/products/${id}`)\n};\n\n// Services pour les comparaisons\nexport const comparisonService = {\n  getCheapest: (limit = 20) => api.get(`/comparisons/cheapest?limit=${limit}`),\n  getBestByCategory: (categoryId, limit = 20) => api.get(`/comparisons/category/${categoryId}/best?limit=${limit}`),\n  getByPriceRange: (minPrice, maxPrice, limit = 50) => api.get(`/comparisons/price-range?min_price=${minPrice}&max_price=${maxPrice}&limit=${limit}`),\n  compareProducts: productIds => api.post('/comparisons/compare-products', {\n    product_ids: productIds\n  }),\n  compareStores: (storeIds, categoryId = null, limit = 50) => api.post('/comparisons/compare-stores', {\n    store_ids: storeIds,\n    category_id: categoryId,\n    limit\n  }),\n  search: params => api.get('/comparisons/search', {\n    params\n  })\n};\n\n// Services d'authentification\nexport const authService = {\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  }),\n  register: (username, email, password) => api.post('/auth/register', {\n    username,\n    email,\n    password\n  }),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: data => api.put('/auth/profile', data),\n  changePassword: (currentPassword, newPassword) => api.post('/auth/change-password', {\n    currentPassword,\n    newPassword\n  })\n};\n\n// Services pour les catégories\nexport const categoryService = {\n  getAll: () => api.get('/categories'),\n  getById: id => api.get(`/categories/${id}`),\n  create: data => api.post('/categories', data),\n  update: (id, data) => api.put(`/categories/${id}`, data),\n  delete: id => api.delete(`/categories/${id}`)\n};\n\n// Services pour les prix\nexport const priceService = {\n  upsert: data => api.post('/prices', data),\n  delete: (productId, storeId) => api.delete(`/prices?product_id=${productId}&store_id=${storeId}`),\n  getByProduct: productId => api.get(`/prices/product/${productId}`),\n  getByStore: (storeId, limit = 100) => api.get(`/prices/store/${storeId}?limit=${limit}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","storeService","getAll","get","getById","id","getByCity","city","getByPostalCode","postalCode","getNearby","latitude","longitude","radius","data","post","update","put","delete","productService","params","search","term","limit","getByCategory","categoryId","getByBarcode","barcode","getPrices","compare","storeIds","join","getStats","searchAdvanced","filters","comparisonService","getCheapest","getBestByCategory","getByPriceRange","minPrice","maxPrice","compareProducts","productIds","product_ids","compareStores","store_ids","category_id","authService","login","email","password","register","username","getProfile","updateProfile","changePassword","currentPassword","newPassword","categoryService","priceService","upsert","productId","storeId","getByProduct","getByStore"],"sources":["/Applications/MAMP/htdocs/LocalPrice/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuration de base d'axios\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Intercepteur pour ajouter le token d'authentification\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Intercepteur pour gérer les erreurs de réponse\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expiré ou invalide\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Services pour les magasins\nexport const storeService = {\n  getAll: () => api.get('/stores'),\n  getById: (id) => api.get(`/stores/${id}`),\n  getByCity: (city) => api.get(`/stores/search/city/${city}`),\n  getByPostalCode: (postalCode) => api.get(`/stores/search/postal/${postalCode}`),\n  getNearby: (latitude, longitude, radius = 10) => \n    api.get(`/stores/nearby?latitude=${latitude}&longitude=${longitude}&radius=${radius}`),\n  create: (data) => api.post('/stores', data),\n  update: (id, data) => api.put(`/stores/${id}`, data),\n  delete: (id) => api.delete(`/stores/${id}`),\n};\n\n// Services pour les produits\nexport const productService = {\n  getAll: (params = {}) => api.get('/products', { params }),\n  getById: (id) => api.get(`/products/${id}`),\n  search: (term, limit = 50) => api.get(`/products/search/${term}?limit=${limit}`),\n  getByCategory: (categoryId, limit = 50) => \n    api.get(`/products/category/${categoryId}?limit=${limit}`),\n  getByBarcode: (barcode) => api.get(`/products/barcode/${barcode}`),\n  getPrices: (id) => api.get(`/products/${id}/prices`),\n  compare: (id, storeIds = []) => \n    api.get(`/products/${id}/compare?stores=${storeIds.join(',')}`),\n  getStats: (id) => api.get(`/products/${id}/stats`),\n  searchAdvanced: (filters) => api.post('/products/search/advanced', filters),\n  create: (data) => api.post('/products', data),\n  update: (id, data) => api.put(`/products/${id}`, data),\n  delete: (id) => api.delete(`/products/${id}`),\n};\n\n// Services pour les comparaisons\nexport const comparisonService = {\n  getCheapest: (limit = 20) => api.get(`/comparisons/cheapest?limit=${limit}`),\n  getBestByCategory: (categoryId, limit = 20) => \n    api.get(`/comparisons/category/${categoryId}/best?limit=${limit}`),\n  getByPriceRange: (minPrice, maxPrice, limit = 50) => \n    api.get(`/comparisons/price-range?min_price=${minPrice}&max_price=${maxPrice}&limit=${limit}`),\n  compareProducts: (productIds) => \n    api.post('/comparisons/compare-products', { product_ids: productIds }),\n  compareStores: (storeIds, categoryId = null, limit = 50) => \n    api.post('/comparisons/compare-stores', { \n      store_ids: storeIds, \n      category_id: categoryId, \n      limit \n    }),\n  search: (params) => api.get('/comparisons/search', { params }),\n};\n\n// Services d'authentification\nexport const authService = {\n  login: (email, password) => api.post('/auth/login', { email, password }),\n  register: (username, email, password) => \n    api.post('/auth/register', { username, email, password }),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (data) => api.put('/auth/profile', data),\n  changePassword: (currentPassword, newPassword) => \n    api.post('/auth/change-password', { currentPassword, newPassword }),\n};\n\n// Services pour les catégories\nexport const categoryService = {\n  getAll: () => api.get('/categories'),\n  getById: (id) => api.get(`/categories/${id}`),\n  create: (data) => api.post('/categories', data),\n  update: (id, data) => api.put(`/categories/${id}`, data),\n  delete: (id) => api.delete(`/categories/${id}`),\n};\n\n// Services pour les prix\nexport const priceService = {\n  upsert: (data) => api.post('/prices', data),\n  delete: (productId, storeId) => \n    api.delete(`/prices?product_id=${productId}&store_id=${storeId}`),\n  getByProduct: (productId) => api.get(`/prices/product/${productId}`),\n  getByStore: (storeId, limit = 100) => \n    api.get(`/prices/store/${storeId}?limit=${limit}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}